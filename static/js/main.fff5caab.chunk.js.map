{"version":3,"sources":["componentes/Header.js","componentes/Editor.js","componentes/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","guidelines","Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","preventDefault","markdownRef","current","value","React","createRef","ref","rows","id","defaultValue","initialText","onChange","type","Component","Preview","dangerouslySetInnerHTML","__html","markdown","App","text","setState","marked","state","setOptions","breaks","componentes_Header","componentes_Editor","componentes_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAiBeA,EAdA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAA4BJ,EAAMK,OAClDJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gDAAgDJ,EAAMM,cCuCnEC,cAzCX,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KAMVe,aAAe,SAAAC,GAEXA,EAAEC,iBAGFT,EAAKR,MAAMe,aAAaP,EAAKU,YAAYC,QAAQC,QARjDZ,EAAKU,YAAcG,IAAMC,YAJVd,wEAgBf,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kCAAhB,oBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,YACIoB,IAAKZ,KAAKO,YACVd,UAAU,mBACVoB,KAAK,KACLC,GAAG,SACHC,aAAcf,KAAKX,MAAM2B,YACzBC,SAAUjB,KAAKI,aACfc,KAAK,kBA/BRC,aCkBNC,EAlBC,SAAA/B,GAEZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kCAAhB,uBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYqB,GAAG,UAAUO,wBAAyB,CAACC,OAAQjC,EAAMkC,+BC8FjFC,cAjGb,SAAAA,IAAc,IAAA3B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACZ3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,QA8DFI,aAAe,SAAAqB,GACb5B,EAAK6B,SAAS,CACZH,SAAUI,IAAOF,MA9DnB5B,EAAK+B,MAAQ,CACXL,SAAU,IAGZI,IAAOE,WAAW,CAChBC,QAAQ,IAGVjC,EAAKmB,YAAL,2tCAXYnB,mFA4DZG,KAAKI,aAAaJ,KAAKgB,8CAUvB,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAD,CACErC,MAAM,qBACNC,WAAW,+FAEbL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACwC,EAAD,CACEhB,YAAahB,KAAKgB,YAClBZ,aAAcJ,KAAKI,gBAIvBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACyC,EAAD,CACEV,SAAUvB,KAAK4B,MAAML,sBAzFnBJ,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fff5caab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    return (\n        <nav className=\"navbar mb-4 shadow text-center\">\n            <span className=\"w-100 mt-2 h2 text-white\">{props.title}</span>\n            <span className=\"w-100 mb-3 d-none d-sm-block text-white lead\">{props.guidelines}</span>                    \n        </nav>\n    );\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n    guidelines: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Editor extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        // Referencias a los datos del formulario\n        this.markdownRef = React.createRef();\n    }\n\n    handleChange = e => {\n        // Cancelamos la accion por defecto del formulario\n        e.preventDefault();\n\n        // Enviarlo por props desde el hijo hasta el padre\n        this.props.handleChange(this.markdownRef.current.value);\n    }\n\n    render() { \n        return (\n            <div className=\"card shadow-lg m-2\">\n                <div className=\"card-header\">\n                    <span className=\"col-12 lead font-weight-bolder\">Markdown Editor</span>\n                </div>\n                <div className=\"card-body\">\n                    <textarea\n                        ref={this.markdownRef}\n                        className=\"col-12 shadow-lg\"\n                        rows=\"25\"\n                        id=\"editor\"\n                        defaultValue={this.props.initialText}\n                        onChange={this.handleChange}\n                        type=\"text\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nEditor.propTypes = {\n    initialText: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired\n}\n \nexport default Editor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Preview = props => {\n \n    return (\n        <div className=\"card shadow-lg m-2\">\n            <div className=\"card-header\">\n                <span className=\"col-12 lead font-weight-bolder\">Markdown Previewer</span>\n            </div>\n            <div className=\"card-body\">\n                <div className=\"w-100 p-2\" id='preview' dangerouslySetInnerHTML={{__html: props.markdown}} />\n            </div>\n        </div>\n    );\n}\n\nPreview.propTypes = {\n    markdown: PropTypes.string.isRequired\n}\n \nexport default Preview;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Editor from './componentes/Editor';\nimport Preview from './componentes/Preview';\nimport marked from 'marked';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      markdown: ''\n    }\n\n    marked.setOptions({\n      breaks: true,\n    });\n\n    this.initialText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n      \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n    \n\\`\\`\\`\n// this is multi-line code:\n    \nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n      \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n    \nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n    \nAnd if you want to get really crazy, even tables:\n    \nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n    \n- And of course there are lists.\n  - Some are bulleted.\n    - With different indentation levels.\n      - That look like this.\n    \n    \n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n    \n![React Logo w/ Text](https://goo.gl/Umyytc)\n    `\n  }\n\n  componentDidMount() {\n    this.handleChange(this.initialText);\n  }\n\n  handleChange = text => {\n    this.setState({\n      markdown: marked(text)\n    });    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n          title=\"Markdown Previewer\"\n          guidelines=\"Enter your text into the editor (left) using markdown syntax to preview (right) the result\"\n        />\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Editor \n                initialText={this.initialText}\n                handleChange={this.handleChange}\n              />\n            </div>\n\n            <div className=\"col-md-6\">\n              <Preview \n                markdown={this.state.markdown}\n              />  \n            </div>  \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}